---
# This depends on a CFT to stand up the VPC with two public and two private subnets
#  ansible-playbook controller_environment_deploy_aws.yml -e "@controller_aws_vars.yaml"     

- name: deploy nginx instances
  hosts: localhost
  gather_facts: false
  connection: local

  tasks:
    - name: Create loadbalancer-sg security group
      ec2_group:
        name: loadbalancer-sg
        tags:
          Name: loadbalancer-sg
        description: "The web traffic ingress security group"
        region: "{{region}}"
        vpc_id: "{{vpc_id}}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
            #cidr_ip: "{{vpc_cidr_ip}}"
            rule_desc: "Ansible" 
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0

    - name: Create webserver-sg security group
      ec2_group:
        name: webserver-sg
        tags:
          Name: webserver-sg
        description: "The webserver internal security group"
        region: "{{region}}"
        vpc_id: "{{vpc_id}}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: "{{vpc_cidr_ip}}"
            rule_desc: "allowed from loadbalancer"
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: "{{vpc_cidr_ip}}"
            rule_desc: "allowed from loadbalancer"
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
            #cidr_ip: "{{vpc_cidr_ip}}"
            rule_desc: "Ansible"
          - proto: tcp
            from_port: 3000
            to_port: 3000
            cidr_ip: "{{vpc_cidr_ip}}"
            rule_desc: "juice-shop"
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0

    - name: Create controller-sg security group
      ec2_group:
        name: controller-sg
        tags:
          Name: controller-sg
        description: "The web traffic ingress security group"
        region: "{{region}}"
        vpc_id: "{{vpc_id}}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: "{{vpc_cidr_ip}}"
            rule_desc: "Controller agent"
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
            rule_desc: "Controller GUI"
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
            #cidr_ip: "{{vpc_cidr_ip}}"
            rule_desc: "Ansible" 
          - proto: tcp
            from_port: 8443
            to_port: 8443
            cidr_ip: "{{vpc_cidr_ip}}"
            rule_desc: "Controller agent"
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0

    - name: Create dbserver-sg security group
      ec2_group:
        name: dbserver-sg
        tags:
          Name: dbserver-sg
        description: "The dbserver internal security group"
        region: "{{region}}"
        vpc_id: "{{vpc_id}}"
        rules:
          - proto: tcp
            from_port: 5432
            to_port: 5432
            cidr_ip: "{{vpc_cidr_ip}}"
            rule_desc: "PostgreSQL port"
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
            #cidr_ip: "{{vpc_cidr_ip}}"
            rule_desc: "Ansible"
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0


    - name: Create LB machine instance
      ec2_instance:
        name: "{{prepend_name}}-loadBalancer"
        instance_type: t3a.micro
        security_group: loadbalancer-sg
        image_id: "{{image_id}}"
        key_name: "{{key_name}}"
        region: "{{region}}"
        vpc_subnet_id: "{{loadbalancer_public_subnet}}"
        wait: yes
        network:
          assign_public_ip: true
      register: lbmachine

 
    - name: create loadbalancers host file
      lineinfile:
        dest: "{{playbook_dir}}/loadbalancers"
        line: "[loadbalancers]"
        create: yes

    - name: add lbmachine to loadbalancers host file
      lineinfile:
        dest: "{{playbook_dir}}/loadbalancers"
        line: "{{lbmachine.instances[0].private_dns_name}}"
        insertafter: EOF
        state: present

    - name: Create webserver machine instance(s)
      ec2_instance:
        name: "{{prepend_name}}-webServer"
        instance_type: t3a.micro
        security_group: webserver-sg
        image_id: "{{image_id}}"
        key_name: "{{key_name}}"
        region: "{{region}}"
        vpc_subnet_id: "{{webserver_private_subnet}}"
        wait: yes
      register: webserver

    - name: Create webserver2 machine instance(s)
      ec2_instance:
        name: "{{prepend_name}}-webServer2"
        instance_type: t3a.micro
        security_group: webserver-sg
        image_id: "{{image_id}}"
        key_name: "{{key_name}}"
        region: "{{region}}"
        vpc_subnet_id: "{{webserver_private_subnet}}"
        wait: yes
      register: webserver2

    # - debug:
    #     var: webserver

    - name: create webservers host file
      lineinfile:
        dest: "{{playbook_dir}}/webservers"
        line: "[webservers]"
        create: yes

    - name: add webserver to webservers host file
      lineinfile:
        dest: "{{playbook_dir}}/webservers"
        line: "{{webserver.instances[0].private_dns_name}}"
        insertafter: EOF
        state: present

    # - debug:
    #     var: webserver2

    - name: add webserver2 to webservers host file
      lineinfile:
        dest: "{{playbook_dir}}/webservers"
        line: "{{webserver2.instances[0].private_dns_name}}"
        insertafter: EOF
        state: present

    - name: Create controller machine instance
      ec2_instance:
        name: "{{prepend_name}}-controller"
        instance_type: t3a.xlarge
        security_group: controller-sg
        image_id: "{{image_id}}"
        volumes:
        - device_name: /dev/sda1
          ebs:
            volume_size: 36
            delete_on_termination: true
        key_name: "{{key_name}}"
        region: "{{region}}"
        vpc_subnet_id: "{{controller_public_subnet}}"
        wait: yes
      register: controller

    # - debug:
    #     var: controller

    - name: create controller host file
      lineinfile:
        dest: "{{playbook_dir}}/controller"
        line: "[controller]"
        create: yes

    - name: add controller to controller host file
      lineinfile:
        dest: "{{playbook_dir}}/controller"
        line: "{{controller.instances[0].private_dns_name}}"
        insertafter: EOF
        state: present

    - name: Create dbserver machine instance(s)
      ec2_instance:
        name: "{{prepend_name}}-dbServer"
        instance_type: t3a.medium
        security_group: dbserver-sg
        image_id: "{{image_id}}"
        key_name: "{{key_name}}"
        region: "{{region}}"
        vpc_subnet_id: "{{database_private_subnet}}"
        wait: yes
      register: dbserver

    # - debug:
    #     var: dbserver

    - name: create dbserver host file
      lineinfile:
        dest: "{{playbook_dir}}/dbserver"
        line: "[dbserver]"
        create: yes

    - name: add dbserver to dbserver host file
      lineinfile:
        dest: "{{playbook_dir}}/dbserver"
        line: "{{dbserver.instances[0].private_dns_name}}"
        insertafter: EOF
        state: present
